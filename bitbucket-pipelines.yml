#  Template Java Gradle build

#  This template allows you to test and build your Java project with Gradle.
#  The workflow allows running tests, code checkstyle and security scans on the default branch.

# Prerequisites: appropriate project structure should exist in the repository.

image: gradle:8.2.0

pipelines:
  default:
    - parallel:
        - step:
            name: Build and Test Backend
            caches:
              - gradle
            script:
              - cd server/MovieSocialNetwork
              - gradle build
            after-script:
              - pipe: atlassian/checkstyle-report:0.3.0
        - step:
            name: Build And Test Client
            image: zenika/alpine-chrome:with-node
            caches:
              - node
            script:
              - cd ./client/
              - npm install
              - npm run lint
              - npm run build
              - npm run test:ci 
            after-script:
              - pipe: atlassian/checkstyle-report:0.3.0
    - step:
        name: Security Scan
        script:
          - pipe: atlassian/git-secrets-scan:0.5.1

    # DEPLOYMENT
    # 0.download azure cli and login
    - step:
        name: Download Azure CLI and Login
        script:
          - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          - az login --service-principal -u $AZURE_SP_ID -p $AZURE_PASSWORD --tenant $AZURE_TENANT_ID
          - az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_AKS_NAME
    # 1.build & push docker images for backend and frontend
    - step:
        name: Build Backend Image
        script:
          #backend
          - cd server/MovieSocialNetwork
          - docker build -t sep6containerregistry2.azurecr.io/server:latest .
          - docker push sep6containerregistry2.azurecr.io/server:latest
            #frontend
          - cd ../../client
          - docker build -t sep6containerregistry2.azurecr.io/client:latest .
          - docker push sep6containerregistry2.azurecr.io/client:latest
#          #postgres
#          - docker tag postgres:latest ${AZURE_ACR_NAME}.azurecr.io/postgres:latest
#          - docker push ${AZURE_ACR_NAME}.azurecr.io/postgres:latest

    # 2. deploy to azure kubernetes service using microsoft/azure-aks-deploy kubectl pipe
    - step:
        name: Deploy to Azure Kubernetes Service
        script:
          - pipe: atlassian/azure-aks-deploy:1.2.0
            variables:
              AZURE_APP_ID: $AZURE_APP_ID
              AZURE_PASSWORD: $AZURE_PASSWORD
              AZURE_TENANT_ID: $AZURE_TENANT_ID
              AZURE_AKS_NAME: 'AKSClusterSEP6'
              AZURE_RESOURCE_GROUP: 'SEP6'
              KUBECTL_COMMAND: 'apply'
              # KUBECTL_ARGUMENTS: '<string>'
              # AZURE_SUBSCRIPTION: '<string>' # Optional.
              # AZURE_LOGIN_NON_INTERACTIVE: '<boolean>' # Optional
              # KUBERNETES_SPEC_FILE: '<string>' # Optional
              # KUBERNETES_SPEC_FILE: './manifests/manifest-postgres.yaml', './manifests/manifest-backend.yaml', './manifests/manifest-frontend.yaml' # Optional: Specific manifests and their order to apply can be specified.
              # DEBUG: '<boolean>' # Optional

#    # 2. deploy to azure kubernetes service
#    - step:
#        name: Deploy to Azure Kubernetes Service
#        deployment: production
#        script:
#          - az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_AKS_NAME
#          - kubectl apply -f ./manifests/manifest-postgres.yaml
#          - kubectl apply -f ./manifests/manifest-backend.yaml
#          - kubectl apply -f ./manifests/manifest-frontend.yaml