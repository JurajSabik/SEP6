
pipelines:
  default:
    - parallel:
        - step:
            name: Build and Test Backend
            image: gradle:8.2.0
            caches:
              - gradle
            script:
              - cd server/MovieSocialNetwork
              - gradle build
            artifacts:
              - server/MovieSocialNetwork/InfrastructureServices/build/libs/InfrastructureServices-1.0.jar
            after-script:
              - pipe: atlassian/checkstyle-report:0.3.0
        - step:
            name: Build And Test Client
            image: zenika/alpine-chrome:with-node
            caches:
              - node
            script:
              - cd ./client/
              - npm install
              - npm run lint
              - npm run build
              - npm run test:ci
            artifacts:
              - client/dist/movies-sep6/**
            after-script:
              - pipe: atlassian/checkstyle-report:0.3.0
    - step:
        name: Security Scan
        script:
          - pipe: atlassian/git-secrets-scan:0.5.1
    - step:
        name: Download Azure CLI and Login
        image: mcr.microsoft.com/azure-cli
        services:
          - docker
        script:
          - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          - az login --service-principal -u $AZURE_SP_ID -p $AZURE_PASSWORD --tenant $AZURE_TENANT_ID
          - az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_AKS_NAME
    - step:
        name: Build Images and Push to Azure Container Registry
        image: mcr.microsoft.com/azure-cli
        services:
          - docker
        script:
          - docker login $AZURE_ACR_NAME.azurecr.io -u sep6containerregistry2 -p $AZURE_ACR_PASSWORD
          - cd server/MovieSocialNetwork
          - docker build -t $AZURE_ACR_NAME.azurecr.io/server:latest .
          - cd ../../client
          - docker build -t $AZURE_ACR_NAME.azurecr.io/client:latest .
          - docker push $AZURE_ACR_NAME.azurecr.io/server:latest
          - docker push $AZURE_ACR_NAME.azurecr.io/client:latest
    - step:
        name: Deploy to Azure Kubernetes Service
        script:
          - pipe: atlassian/azure-aks-deploy:1.2.0
            variables:
              AZURE_APP_ID: $AZURE_APP_ID
              AZURE_PASSWORD: $AZURE_PASSWORD
              AZURE_TENANT_ID: $AZURE_TENANT_ID
              AZURE_AKS_NAME: $AZURE_AKS_NAME
              AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
              KUBECTL_COMMAND: 'apply'
              KUBECTL_ARGUMENTS: '-f ./manifests/manifest-postgres.yaml -f ./manifests/manifest-backend.yaml -f ./manifests/manifest-frontend.yaml'